import { existsSync, readFileSync, renameSync, writeFileSync } from 'fs';
import { basename, join } from 'path';
import { js2xml, xml2js } from 'xml-js';

import * as msg from './qorus_message';
import { getQorusJavaApiSrcPath } from './qorus_java_utils';

const java_classpath_filename = '.classpath';
const java_project_filename = '.project';

//! name of the Qorus Java API used in the configuration
const java_qorus_api_name = 'qorus-vscode-qorus-java-api';

//! default Java .classpath file contents
const default_java_classpath = {
    '_declaration': {
        '_attributes': {
            'version': '1.0',
            'encoding': 'utf-8'
        }
    },
    'classpath': {
        'classpathentry': {
            '_attributes': {
                'kind': 'src',
                'path': java_qorus_api_name
            }
        }
    }
};

//! default Java .project file contents
const default_java_project = {
    '_declaration': {
        '_attributes': {
            'version': '1.0',
            'encoding': 'utf-8'
        }
    },
    'projectDescription': {
        'name': {
            '_text': 'name'
        },
        'comment': {
            '_text': 'Generated by qorus-vscode.'
        },
        'projects': {},
        'natures': {
            'nature': {
                '_text': 'org.eclipse.jdt.core.javanature'
            }
        },
        'linkedResources': {
            'link': {
                'name': {
                    '_text': java_qorus_api_name
                },
                'type': {
                    '_text': 2
                },
                'location': {
                    '_text': getQorusJavaApiSrcPath()
                }
            }
        }
    }
};

export class QorusProjectJavaConfig {
    private project_folder: string;
    private classpath;
    private project;

    constructor(projectFolder: string) {
        this.project_folder = projectFolder;
    }

    //! return path to classpath file in the project folder
    get java_classpath_file(): string {
        return join(this.project_folder, java_classpath_filename);
    }

    //! return path to project file in the project folder
    get java_project_file(): string {
        return join(this.project_folder, java_project_filename);
    }

    classpathFileExists(): boolean {
        return existsSync(this.java_classpath_file);
    }

    projectFileExists(): boolean {
        return existsSync(this.java_project_file);
    }

    //! validate whether the loaded classpath has basic necessities
    private validateClasspath(): boolean {
        if (this.classpath === null || typeof this.classpath !== 'object') {
            return false;
        }
        if (!this.classpath.classpath) {
            return false;
        }
        return true;
    }

    //! validate whether the loaded project has basic necessities
    private validateProject(): boolean {
        if (this.project === null || typeof this.project !== 'object') {
            return false;
        }
        if (!this.project.projectDescription) {
            return false;
        }
        return true;
    }

    //! return whether the loaded classpath has Qorus API configured
    private classpathContainsQorusApi(): boolean {
        if (!this.classpath.classpath.classpathentry) {
            return false;
        }
        if (Array.isArray(this.classpath.classpath.classpathentry)) {
            for (const entry of this.classpath.classpath.classpathentry) {
                if (entry._attributes.path === java_qorus_api_name) {
                    return true;
                }
            }
            return false;
        } else if (this.classpath.classpath.classpathentry._attributes.path === java_qorus_api_name) {
            return true;
        }
        return false;
    }

    //! return whether the loaded project has Qorus API configured
    private projectContainsQorusApi(): boolean {
        if (! (
            this.project.projectDescription.linkedResources &&
            this.project.projectDescription.linkedResources.link
        )) {
            return false;
        }
        if (Array.isArray(this.project.projectDescription.linkedResources.link)) {
            for (const link of this.project.projectDescription.linkedResources.link) {
                if (! (link.name && link.name._text)) {
                    continue;
                }
                if (link.name._text === java_qorus_api_name) {
                    return true;
                }
            }
            return false;
        } else if (this.project.projectDescription.linkedResources.link.name &&
                   this.project.projectDescription.linkedResources.link.name._text === java_qorus_api_name) {
            return true;
        }
        return false;
    }

    //! load classpath from the classpath XML file into a JS object
    loadClasspath(): boolean {
        const classpathFile = this.java_classpath_file;
        if (!existsSync(classpathFile)) {
            return false;
        }
        try {
            const classpath_xml = readFileSync(classpathFile, 'utf8');
            this.classpath = xml2js(classpath_xml, {compact: true});
            if (!this.validateClasspath()) {
                this.classpath = undefined;
                return false;
            }
            return this.classpathContainsQorusApi();
        } catch (error) {
            msg.log('Error loading Java classpath: ' + error);
            return false;
        }
    }

    //! load project from the project XML file into a JS object
    loadProject(): boolean {
        const projectFile = this.java_project_file;
        if (!existsSync(projectFile)) {
            return false;
        }
        try {
            const project_xml = readFileSync(projectFile, 'utf8');
            this.project = xml2js(project_xml, {compact: true});
            if (!this.validateProject()) {
                this.project = undefined;
                return false;
            }
            return this.projectContainsQorusApi();
        } catch (error) {
            msg.log('Error loading Java project: ' + error);
            return false;
        }
    }

    //! fix the loaded classpath if the Qorus API configuration is missing
    fixClasspath() {
        if (!this.classpath) {
            this.classpath = default_java_classpath;
            return;
        }
        if (!this.classpath.classpath.classpathentry) {
            this.classpath.classpath.classpathentry =
                default_java_classpath.classpath.classpathentry;
            return;
        }

        if (Array.isArray(this.classpath.classpath.classpathentry)) {
            let has_qorus_api_entry = false;
            for (const entry of this.classpath.classpath.classpathentry) {
                if (entry._attributes.path === java_qorus_api_name) {
                    has_qorus_api_entry = true;
                    break;
                }
            }
            if (!has_qorus_api_entry) {
                this.classpath.classpath.classpathentry.push(
                    default_java_classpath.classpath.classpathentry);
            }
        } else {
            this.classpath.classpath.classpathentry = [
                this.classpath.classpath.classpathentry,
                default_java_classpath.classpath.classpathentry
            ];
        }
    }

    //! fix the loaded project if the Qorus API configuration is missing
    fixProject() {
        if (!this.project) {
            this.project = default_java_project;
            this.project.projectDescription.name._text =
                basename(this.project_folder);
            return;
        }
        if (!this.project.projectDescription.linkedResources) {
            this.project.projectDescription.linkedResources =
                default_java_project.projectDescription.linkedResources;
            return;
        }
        if (!this.project.projectDescription.linkedResources.link) {
            this.project.projectDescription.linkedResources.link =
                default_java_project.projectDescription.linkedResources.link;
            return;
        }

        if (Array.isArray(this.project.projectDescription.linkedResources.link)) {
            let has_qorus_api_link = false;
            for (const link of this.project.projectDescription.linkedResources.link) {
                if (!link.name) {
                    continue;
                }
                if (link.name._text === java_qorus_api_name) {
                    has_qorus_api_link = true;
                    break;
                }
            }
            if (!has_qorus_api_link) {
                this.project.projectDescription.linkedResources.link.push(
                    default_java_project.projectDescription.linkedResources.link);
            }
        } else {
            this.project.projectDescription.linkedResources.link = [
                this.project.projectDescription.linkedResources.link,
                default_java_project.projectDescription.linkedResources.link
            ];
        }
    }

    //! generate XML from the fixed classpath data
    private generateClasspathXml(): string {
        return js2xml(this.classpath, {compact: true, spaces: 4});
    }

    //! generate XML from the fixed project data
    private generateProjectXml(): string {
        return js2xml(this.project, {compact: true, spaces: 4});
    }

    //! write a new classpath file and overwrite the old one with it
    writeClasspathFile(): boolean {
        const finalFile = this.java_classpath_file;
        const newFile = finalFile + '.new';
        try {
            writeFileSync(newFile, this.generateClasspathXml());
        } catch (err) {
            msg.log('Failed writing new Java classpath file: ' + err);
            return false;
        }
        try {
            renameSync(newFile, finalFile);
        } catch (err) {
            msg.log('Failed rewriting old Java classpath file: ' + err);
            return false;
        }
        return true;
    }

    //! write a new project file and overwrite the old one with it
    writeProjectFile(): boolean {
        const finalFile = this.java_project_file;
        const newFile = finalFile + '.new';
        try {
            writeFileSync(newFile, this.generateProjectXml());
        } catch (err) {
            msg.log('Failed writing new Java project file: ' + err);
            return false;
        }
        try {
            renameSync(newFile, finalFile);
        } catch (err) {
            msg.log('Failed rewriting old Java project file: ' + err);
            return false;
        }
        return true;
    }
}
